name: Laravel

on: [push]

jobs:
  laravel-test:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: Copy .env
      run: cp .env.test .env
    - name: Install Dependencies
      run: composer install 
    - name: Generate key
      run: php artisan key:generate
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    - name: Setup Database
      # MySQL の起動とデータベースの作成
      run: |
        sudo systemctl start mysql.service
        mysql -uroot -h127.0.0.1 -proot -e 'CREATE DATABASE IF NOT EXISTS test;'
    - name: Migration and Seeding
      run: php artisan migrate:fresh --seed
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      # phpunit.xml で DB_CONNECTION を testing を使用しているので合わせる
      env:
        DB_CONNECTION: mysql
        DB_TEST_HOST: 127.0.0.1
        DB_TEST_PORT: 3306
        DB_TEST_DATABASE: test
        DB_TEST_USERNAME: root
        DB_TEST_PASSWORD: root
      run: vendor/bin/phpunit



  deploy:

    needs: laravel-test
    
    name: Deploy
    
    runs-on: ubuntu-latest
    
    permissions:
      packages: write
      contents: read

    env:
      AWS_REGION: ap-northeast-1
      ECS_TASK_DEFINITION: intern-202108-s_sugai-taskdef
      CONTAINER_NAME: Laravel
      ECS_SERVICE: intern-202108-cluster
      ECS_CLUSTER: intern-202108-s_sugai-service

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Docker コンテナを作成し
          # ECR にプッシュして
          # ECS にデプロイできるようにする。
          #docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          #docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          #echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build -f for_aws/Dockerfile . -t intern-202108/s_sugai-ecr
          docker tag intern-202108/s_sugai-ecr:latest 280107060642.dkr.ecr.ap-northeast-1.amazonaws.com/intern-202108/s_sugai-ecr:v0.1
          docker push 280107060642.dkr.ecr.ap-northeast-1.amazonaws.com/intern-202108/s_sugai-ecr:v0.1

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true